use PracticeDB;

alter table TwoWheeler
alter column Brand varchar(100);

select T.Model,T.Price from
TwoWheeler T left join FourWheeler F
on T.Model=F.Model
where F.Brand is null;

update TwoWheeler
set Price=Price*0.10
where Model='Glamour';

select TOP 2 Model,Brand from TwoWheeler
where Price<90000 order by Brand;

select C.first_name,C.last_name,PR.product_name,O.order_date
from Customers as C inner join Orders as O
on O.customer_id=C.customer_id
inner join Products as PR on O.product_id=PR.product_id
left join Payments as PY on O.order_id=PY.order_id
where PY.payment_id is null;

select distinct C.first_name,C.last_name from
Customers as C inner join Orders as O
on C.customer_id=O.customer_id
inner join Products as PR on
O.product_id=PR.product_id
where Category='Electronics';

select PR.product_name from
Customers as C left join Orders as O on
C.customer_id=O.customer_id
left join Products as PR on
PR.product_id=O.product_id
where C.customer_id='1' and PR.product_name is null;

select PR.product_name
from Products as PR left join Orders as O on PR.product_id=O.product_id and O.customer_id=1
where O.order_id is null;

select PY.payment_method,sum(amount) as Revenue_generated
from Payments Py inner join Orders O on
O.order_id=Py.order_id
group by Py.payment_method having count(O.order_id)>=2;

select C.first_name,C.last_name,sum(amount)as total_spending
from Customers as C inner join Orders as O
on C.customer_id=O.customer_id
inner join Payments as PY on 
O.order_id=PY.order_id
group by C.first_name,C.last_name;

select PR.product_name,PR.category,O.order_id
from Products PR left join  Orders O
on PR.product_id=O.product_id; 

select PR.product_name
from Products as PR inner join Orders as O
on PR.product_id=O.product_id
left join Payments as PY on 
O.order_id=PY.order_id
where PY.payment_id is null;

select Model,Price from TwoWheeler
where Price=(select max(Price) from TwoWheeler);

select avg(round(Price,0)) from TwoWheeler;

select round(avg(price),0) from TwoWheeler;

create table Test2(
  Column1 int primary key,
  Column2 int unique
);

insert into Test2
values(1,101);

select * from Test2;

insert into Test2(Column1)
values(2);

insert into Test2(Column1)
values(3);

select *from Test2 order by Column1;

delete from Test2 where Column2 is null;

alter table Test2
add Price decimal(20,2) check(Price>100000);

insert into Test2
values(2,102,1000000);

insert into Test2
values(3,103,1000);

create table Invoices(
  InvoiceID int primary key,
  SaleDate date,
  CustomerID int not null
);

create table Distributors(
   DistributorID int primary key,
   Name varchar(100),
   PhoneNumber varchar(15) unique
   );

create table VehiclePricing(
  VehicleID int primary key,
  Model varchar(50),
  Price int check(Price>70000)
  );

select Model,SQRT(Price) as PriceRoot from TwoWheeler order by Model offset 1 rows fetch next 1 rows only;

select Model,power(Price,2) as PriceSquared from FourWheeler;

select Model,exp(Price) as PriceExponential from TwoWheeler;

select Model,log(Price) as PriceLog from FourWheeler;

select mod(Price,1000) from TwoWheeler;
select round(789.091,1);
select round(786.091,-1);
select round(789.678,0);
select abs(10.1),abs(-10.5),abs(10.5),abs(10.0),abs(10.6);
select floor(10.1),floor(10.9),ceiling(10.1),ceiling(10.9);

select Brand,Model,concat(Brand,'-',Model) as FullVehicleName from TwoWheeler;

select Brand,len(Brand) as BrandLength from TwoWheeler;

select UPPER(Model),LOWER(Brand) from TwoWheeler;

select substring(Model,0,3) as ModelPrefix from TwoWheeler;

select substring(Model,1,2) from TwoWheeler;

select len('   ');
select datalength('    ');
select len('Hi ');
select len('Hi hello');
select len('  hi');
select len('   hi  ');
select substring('Welcome',5,4);

select Brand,concat('CODE-',right(Model,3)) as ModelCode from TwoWheeler;
select Model,stuff(Model,1,3,Brand) from TwoWheeler;

select Model,len(Model)-Len(replace(model,'e','')) as CountOfE from TwoWheeler;

select left('welcome',3);

select Model,Brand from TwoWheeler
where lower(Model) not like '%o%';

select Brand,
        case
		  when len(Brand)<5 then upper(Brand)
		  when len(Brand)>=5 then upper(left(Brand,3))
		end 
		as BrandCode
from TwoWheeler;

select Brand,concat(replicate('*',10-len(Price)),Price) as PaddedPrice
from TwoWheeler;

select Model from TwoWheeler
where rtrim(Brand)='Honda' and Model like '%m%';

select upper(concat(left(Brand,2),'-',right(Model,4))) as ModelCode from TwoWheeler;

select * from Customers;

update Customers
set City=replace(City,'m','n') where City like 'Bam%';

select Brand,len(rtrim(replace(Brand,'o',''))) as CleanLength from TwoWheeler;

select Model,stuff(cast(Price as varchar),len(cast(Price as varchar))-1,0,',') as PriceClassification from TwoWheeler;

select Model,Brand,round(Price,-3) as PriceRounded from TwoWheeler
where Price=90000;

select * from FourWheeler
where
Brand in('Toyota','Renault')
and Price>4000000;

select Model,concat('Difference:',abs(Price-100000))as PriceStatus from FourWheeler;

select count(Stock_left) as TotalModels,
round(avg(Price),-3) as AvgRoundedPrice,
concat('Max Price:',max(price)) as MaxPriceStatus
from TwoWheeler;

select Model,case
      when Model like '%a%' then Price/365
	  else Price/730
	  end as DailyDepreciation
from TwoWheeler;

select Brand,concat(upper(left(Brand,3)),'-',abs(stock_left-5))as CodeAndStock from TwoWheeler;

CREATE TABLE FileLog (
    FileID INT PRIMARY KEY,
    FilePath VARCHAR(255) NOT NULL
);

INSERT INTO FileLog (FileID, FilePath) VALUES
(1, 'C:\Reports\Q3_Sales.xlsx'),
(2, 'D:\Docs\Project_Notes_V1.pdf'),
(3, 'C:\Images\Profile.photo.jpg'),
(4, 'E:\Database\Setup_Script.sql'),
(5, 'F:\Backup\Old_Backup.tar.gz'); 

select * from FileLog;

select FilePath,reverse(substring(reverse(FilePath),1,charindex('.',reverse(filepath))-1)) as FileExtension from FileLog;

select Model,concat(left(Brand,1),len(rtrim(Model))) as Code from TwoWheeler;

select Model,Brand from TwoWheeler
where len(Brand)=4 and Model like '%a%' and Model not like '%p%';

create view V_Hero_Inventory as
select model,Price,Stock_left from TwoWheeler
where Brand='Hero';

select * from V_Hero_Inventory;

create view V_All_vehicles
as
select Model,Price,Brand from TwoWheeler
union all
select Model,Price,Brand from FourWheeler;

select * from V_All_vehicles;

create view V_Brand_Stock_Value as
select Brand,sum(Price*Stock_left) as total_amount from TwoWheeler group by Brand ;

select * from V_Brand_Stock_Value;

select Brand,total_amount from V_Brand_Stock_Value where total_amount>1000000;

drop view V_Hero_Inventory;

alter view V_Brand_Stock_Value
add round(avg(Price),-3) as AvgRoundPrice;

drop view V_All_vehicles;


